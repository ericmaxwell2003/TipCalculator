<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!--
        Lab 2:

        Add a variable called `vm` of type `com.acme.tipcalculator.viewmodel.CalculatorViewModel`
        to use within the context of this view.  Be sure to wrap it in a data section.

        Bonus Questions:
        * - What method gets generate on the binding object in response to adding this variable?
    -->
    <android.support.constraint.ConstraintLayout
        android:id="@+id/calculation_inputs"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_margin="8dp"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        tools:showIn="@layout/activity_tip_calculator"
        tools:context="com.acme.tipcalculator.view.TipCalculatorActivity">

        <android.support.design.widget.TextInputLayout
            android:id="@+id/input_layout_check_amount"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="8dp"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent">

            <!-- Lab 2: Use a binding expression to set the `android:text` to the
                        viewModel property checkAmtInput
                        Make this a 2-way bound property. -->
            <EditText
                android:id="@+id/input_check_amount"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/enter_check_amount"
                android:inputType="numberDecimal"
                android:imeOptions="actionNext"
                android:maxLines="1"
                android:selectAllOnFocus="true"
                android:text="" />

        </android.support.design.widget.TextInputLayout>


        <android.support.design.widget.TextInputLayout
            android:id="@+id/input_layout_tip_percentage"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="8dp"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/input_layout_check_amount">

            <!-- Lab 2: Use a binding expression to set the `android:text` to the
                        viewModel property tipPctInput
                        Make this a 2-way bound property. -->
            <EditText
                android:id="@+id/input_tip_percentage"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/tip_percentage_label"
                android:inputType="number"
                android:maxLines="1"
                android:selectAllOnFocus="true"
                android:imeOptions="actionDone"
                android:text="" />

        </android.support.design.widget.TextInputLayout>

        <LinearLayout
            android:id="@+id/calculation_outputs"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="8dp"
            android:paddingTop="16dp"
            android:paddingBottom="16dp"
            android:baselineAligned="false"
            android:orientation="horizontal"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toBottomOf="@id/input_layout_tip_percentage">

            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:orientation="vertical">

                <!-- Lab 2: Use a binding expression to set the `android:text` for this TextView.
                            Use a formatted string based on the template R.string.dollar_amount,
                            Get the value from the viewModel's tipCalculation.checkAmount property.

                      Hint: Remember you can access formatted strings with a data binding expression
                            @string/<stringResId>(<inputValues>)
                            Where <stringResId> => Id of Strings resource.
                                  <inputValues> => 0..* different arguments required by the string template
                                                   defined in the stringRestId.
                             -->
                <TextView
                    android:id="@+id/bill_amount"
                    style="@style/Base.TextAppearance.AppCompat.Large"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textAlignment="center"
                    tools:text="$20.00"
                    android:text="$0.00"
                    />

                <TextView
                    android:id="@+id/bill_amount_label"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/check_amount_output_label"
                    tools:text="Check"
                    android:textAlignment="center" />

            </LinearLayout>


            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:orientation="vertical">

                <!-- Lab 2: Use a binding expression to set the `android:text` for this TextView.
                            Use a formatted string based on the template R.string.dollar_amount,
                            Get the value from the viewModel's tipCalculation.tipAmount property. -->
                <TextView
                    android:id="@+id/tip_dollar_amount"
                    style="@style/Base.TextAppearance.AppCompat.Large"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textAlignment="center"
                    tools:text="$11.50"
                    android:text="$0.00" />

                <TextView
                    android:id="@+id/tip_dollar_amount_label"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textAlignment="center"
                    tools:text="Tip"
                    android:text="@string/tip_output_label"
                    />


            </LinearLayout>

            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:orientation="vertical">

                <!-- Lab 2: Use a binding expression to set the `android:text` for this TextView.
                            Use a formatted string based on the template R.string.dollar_amount,
                            Get the value from the viewModel's tipCalculation.grandTotal property. -->
                <TextView
                    android:id="@+id/total_dollar_amount"
                    style="@style/Base.TextAppearance.AppCompat.Large"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textAlignment="center"
                    tools:text="$31.50"
                    android:text="$0.00" />

                <TextView
                    android:id="@+id/total_dollar_amount_label"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/total_output_label"
                    tools:text="Total"
                    android:textAlignment="center" />

            </LinearLayout>

        </LinearLayout>

        <!-- Lab 2: Use a binding expression to set the `android:text` for this TextView.
                    Get the value from the viewModel's tipCalculation.locationName property. -->
        <!--
            Lab 4: Adapters and Converters

            Make use of a new custom attribute pair
            app:text - Expression value of the locationName
            app:animate - Expression value of whether to animate transitions or not

            This will need to be implemented as a BindingAdapter for this to work
            See `BindingAdapters.kt` for other half (open with cmd+o)

            Bonus Questions:
            * - What happens if you omit one of the two attributes?
            * - What happens if you do not use as expression?
        -->
        <TextView
            android:id="@+id/calculation_name"
            style="@style/Base.TextAppearance.AppCompat.Headline"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="8dp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/calculation_outputs"
            android:textAlignment="center"
            android:text=""
            tools:text="Veggie Palace" />


    </android.support.constraint.ConstraintLayout>

</layout>